require("navGo_pathfinding.NavGO_Global")

go.property("Start_path_ID", -1)
go.property("End_path_ID", -1)
go.property("speed", 400)

local function distance(vec1, vec2)
	return math.ceil( math.sqrt( math.pow(vec1.x - vec2.x, 2) + math.pow(vec1.y - vec2.y, 2) ) )
end

local function volume_by_dist(distance)
	local gain = math.min(1, 50/distance)
	if gain < 0.4 then
		gain = 0
	end
	sound.set_gain("#growl", gain)
end

local function toggle_paralyze(self)
	self.paralyze = not self.paralyze
end

local function moveCharacter(self)
	local path, found = NAVGO.GET_PATH_FROM_DIRECTIONAL_ID(self.Start_path_ID, self.End_path_ID)
	if not found then
		-- print("Fish - NO PATH FOUND")
	else
		-- print("Fish - PATH FOUND")
		local delay = 0
		local lastPos = go.get_position()

		for i=1, #path do
			if self.pathing == false or self.paralyze == true then
				return
			end
			local newPosition = vmath.vector3(path[i].x, path[i].y, 0)
			local time = distance(newPosition, lastPos) / self.speed -- move at a consistend speed
			go.animate(go.get_id(), "position", go.PLAYBACK_ONCE_FORWARD, newPosition, go.EASING_LINEAR, time, delay)
			lastPos = newPosition
			delay = delay + time
		end
		timer.delay(delay, false, moveCharacter)
	end
end

function init(self)
	self.pathing = true
	self.paralyze = false
	sound.play("#growl", { gain = 0 })
end

function update(self, dt)
	if self.paralyze == true then
		dt = 0
		return
	end
	local pos = go.get_position()
	local player_pos = go.get_position("/sub")
	local distance = distance(pos, player_pos)
	if distance < 150 then
		volume_by_dist(distance)
		self.pathing = false
		local dir = player_pos - pos
		dir = vmath.normalize(dir)
		sprite.set_hflip("#sprite", dir.x > 0)
		go.set_position(pos + dir * self.speed * dt)
	elseif self.pathing == false and distance > 150 then
		self.pathing = true
		timer.delay(1, false, moveCharacter)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("torpedo") then
			toggle_paralyze(self)
			sound.play("#hurt")
			timer.delay(5, false, toggle_paralyze)
		end
	end
end