go.property("speed", 40)
local camera = require "orthographic.camera"

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "acquire_camera_focus")
	self.velocity = vmath.vector3()
	self.input = vmath.vector3()
	self.max_velocity = 40
	self.correction = vmath.vector3()
	self.dir = vmath.vector3(1, 0, 0)
	self.firing = false
	self.health = 3
	self.max_torpedo = 1
	self.torpedo_count = 3
	self.invul = false
	self.engine_on = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function toggleInvul(self)
	self.invul = not self.invul
end

function update(self, dt)
	if self.health <= 0 then
		print("DEAD")
	end
	
	if vmath.length_sqr(self.input) > 1 then
		self.input = vmath.normalize(self.input)
	end

	if self.firing then
		if self.max_torpedo == 1 then
			self.max_torpedo = 0
			local angle = math.atan2(self.dir.y, self.dir.x)
			local rot = vmath.quat_rotation_z(angle)
			local props = { dir = self.dir }
			factory.create("#torpedofactory", nil, rot, props)
		end
	end

	local acceleration = self.input * self.speed
	
	local dv = acceleration * dt
	local v0 = self.velocity
	local v1 = self.velocity + dv
	
	v1.x = math.min(v1.x, 40)
	v1.y = math.min(v1.y, 40)
	v1.x = math.max(v1.x, -40)
	v1.y = math.max(v1.y, -40)
	
	local movement = (v0 + v1) * dt * 0.5
	
	local new_pos = go.get_position() + movement
	go.set_position(new_pos)

	msg.post("/gui#hud", "send_depth", { y = new_pos.y })
	
	if vmath.length_sqr(self.velocity) > 0 and self.engine_on == false then
		self.engine_on = true
		sound.play("#engine", { gain = 0.1})
	else
	end

	self.velocity = v1 * 0.995
	self.input = vmath.vector3()
	self.firing = false
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("enemy") and self.invul == false then
			self.input = message.normal
			local pos = go.get_position()
			go.set_position(pos + self.input * 30)
			self.health = self.health - 1
			toggleInvul(self)
			msg.post("/scripts#sound_gate", "play_gated_sound", { soundcomponent = "/sub#damage"})
			camera.shake(hash("/camera"), 0.01, 0.5, both)
			timer.delay(3, false, toggleInvul)
			msg.post("/gui#hud", "damage", { remaining = self.health})
		end
		if message.other_group == hash("salvage") then
			self.health = 3
			self.torpedo_count = 3
			sound.play("#pickup")
			go.delete(message.other_id)
			msg.post("/gui#hud", "restore")
		end
 		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end
	end
	if message_id == hash("torpedo_exploded") then
		self.max_torpedo = 1
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
		self.dir.x = 1
	elseif action_id == hash("fire") and action.pressed and self.torpedo_count > 0 and self.max_torpedo > 0 then
		self.firing = true
		self.torpedo_count = self.torpedo_count - 1
		msg.post("/gui#hud", "torpedo_fired", { remaining = self.torpedo_count})
	end
end