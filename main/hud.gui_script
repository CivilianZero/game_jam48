local printer = require "printer.printer"
local styles = {
	standard = {
		scale = .8,
		sound = "typing",
	}
}

texts = {"{standard}Salvage detected within the cave system. Go a little deeper and see how much you can find.", 
"{standard}This can't be right, you're....that's too deep, but...more signals detected.",
"{standard}Losing signal, please respond. Are you there?"}
salvage_texts = {
	{"{standard}Destroyer wreckage, decades old. Highly corroded.",
	"{standard}Remnants of frigate hull cuttings.",
	"{standard}Discarded munitions. Still of use.",
	"{standard}Lost research equipment. Study subjects unknown.",
	"{standard}Shell casings. Relatively recent. Origin unknown."},
	{"{standard}Blood. Blood in the water...",
	"{standard}Brass and Steel plates. Engineering vessel.",
	"{standard}Impossible metal shapes. Filled with holess.",
	"{standard}Wood and Wine. Shipwreck.",
	"{standard}Crystalline formations. Formed over Skeletons.",
	"{standard}Fossils of Unknown Specimens. Science Vessel."},
	{"{standard}The Holy.",
	"{standard}The Vessel: Empty. Or The Vessel. Empty.",
	"{standard}A Void of Effervescence",
	"{standard}A Seal on a Hole in the World",
	"{standard}Tissue formed from Steel",
	"{standard}The Final Step"}
}

function init(self)
	self.printer = printer.new(self, "printer")
	printer.add_styles(styles)
	self.current_depth = 0
	self.current_level = 1
	printer.play_sound = function(name)
		sound.play("main:/sounds#" .. name)
	end
end

function final(self)
	self.printer:final(self)
end

function update(self, dt)
	self.printer:update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("initial_depth") then
		self.current_depth = message.depth
	end
	if message_id == hash("torpedo_fired") then
		if message.remaining == 2 then
			local node = gui.get_node("torpedo2")
			gui.play_flipbook(node, "UI-empty-torpedo")
		elseif message.remaining == 1 then
			local node = gui.get_node("torpedo1")
			gui.play_flipbook(node, "UI-empty-torpedo")
		else
			local node = gui.get_node("torpedo")
			gui.play_flipbook(node, "UI-empty-torpedo")
		end
	end
	if message_id == hash("restore") then
		local torpedo2 = gui.get_node("torpedo2")
		local torpedo1 = gui.get_node("torpedo1")
		local torpedo = gui.get_node("torpedo")
		local health = gui.get_node("sub")
		gui.play_flipbook(torpedo2, "UI-ready-torpedo")
		gui.play_flipbook(torpedo1, "UI-ready-torpedo")
		gui.play_flipbook(torpedo, "UI-ready-torpedo")
		gui.play_flipbook(health, "UI-minisub1")
	end
	if message_id == hash("damage") then
		local node = gui.get_node("sub")
		if message.remaining == 2 then
			gui.play_flipbook(node, "UI-minisub2")
		elseif message.remaining == 1 then
			gui.play_flipbook(node, "UI-minisub3")
		end
	end
	if message_id == hash("send_depth") then
		local depth = message.depth
		local text_node = gui.get_node("depth")
		local text = gui.get_text(text_node)
		if depth < self.current_depth - 9 then
			gui.set_text(text_node, "00"..(text + 1))
			self.current_depth = depth
		elseif depth > self.current_depth + 9 then
			gui.set_text(text_node, "00"..(text - 1))
			self.current_depth = depth
		end
	end
	if message_id == hash("salvage_text") then
		local level = message.level
		local index = tonumber(message.salvage_number)
		self.printer:print(salvage_texts[level][index])
	end
	if message_id == hash("open_text") then
		local index = tonumber(message.level)
		self.current_level = index
		timer.delay(0.5, false, function()
			self.printer:print(texts[index])
		end)
	end
end